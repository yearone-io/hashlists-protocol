/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface ILSP1UniversalReceiverInterface extends Interface {
  getFunction(nameOrSignature: "universalReceiver"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "UniversalReceiver"): EventFragment;

  encodeFunctionData(
    functionFragment: "universalReceiver",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "universalReceiver",
    data: BytesLike
  ): Result;
}

export namespace UniversalReceiverEvent {
  export type InputTuple = [
    from: AddressLike,
    value: BigNumberish,
    typeId: BytesLike,
    receivedData: BytesLike,
    returnedValue: BytesLike
  ];
  export type OutputTuple = [
    from: string,
    value: bigint,
    typeId: string,
    receivedData: string,
    returnedValue: string
  ];
  export interface OutputObject {
    from: string;
    value: bigint;
    typeId: string;
    receivedData: string;
    returnedValue: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ILSP1UniversalReceiver extends BaseContract {
  connect(runner?: ContractRunner | null): ILSP1UniversalReceiver;
  waitForDeployment(): Promise<this>;

  interface: ILSP1UniversalReceiverInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  universalReceiver: TypedContractMethod<
    [typeId: BytesLike, data: BytesLike],
    [string],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "universalReceiver"
  ): TypedContractMethod<
    [typeId: BytesLike, data: BytesLike],
    [string],
    "payable"
  >;

  getEvent(
    key: "UniversalReceiver"
  ): TypedContractEvent<
    UniversalReceiverEvent.InputTuple,
    UniversalReceiverEvent.OutputTuple,
    UniversalReceiverEvent.OutputObject
  >;

  filters: {
    "UniversalReceiver(address,uint256,bytes32,bytes,bytes)": TypedContractEvent<
      UniversalReceiverEvent.InputTuple,
      UniversalReceiverEvent.OutputTuple,
      UniversalReceiverEvent.OutputObject
    >;
    UniversalReceiver: TypedContractEvent<
      UniversalReceiverEvent.InputTuple,
      UniversalReceiverEvent.OutputTuple,
      UniversalReceiverEvent.OutputObject
    >;
  };
}
